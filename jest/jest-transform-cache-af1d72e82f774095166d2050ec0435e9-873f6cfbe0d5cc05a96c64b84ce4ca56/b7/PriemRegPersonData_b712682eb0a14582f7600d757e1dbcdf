'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.PriemRegPersonData = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _StylePriem = require('../common/StylePriem');
var _reactRedux = require('react-redux');
var _AutoComplete = require('material-ui/AutoComplete');var _AutoComplete2 = _interopRequireDefault(_AutoComplete);

var _dataProviderActions = require('../actions/dataProviderActions/');
var _Checkbox = require('material-ui/Checkbox');var _Checkbox2 = _interopRequireDefault(_Checkbox);
var _TextField = require('material-ui/TextField');var _TextField2 = _interopRequireDefault(_TextField);
var _RadioButton = require('material-ui/RadioButton');
var _multiSelect = require('../common/multiSelect');var _multiSelect2 = _interopRequireDefault(_multiSelect);
var _Subheader = require('material-ui/Subheader');var _Subheader2 = _interopRequireDefault(_Subheader);
var _PriemImageComponent = require('../common/PriemImageComponent');var _PriemImageComponent2 = _interopRequireDefault(_PriemImageComponent);
var _Divider = require('material-ui/Divider');var _Divider2 = _interopRequireDefault(_Divider);

var _regNewPerson = require('../actions/regNewPerson/');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}













var dataSourceConfig = {
	text: 'value',
	value: 'id' };var


PriemRegPersonData = exports.PriemRegPersonData = function (_React$Component) {_inherits(PriemRegPersonData, _React$Component);function PriemRegPersonData() {_classCallCheck(this, PriemRegPersonData);return _possibleConstructorReturn(this, (PriemRegPersonData.__proto__ || Object.getPrototypeOf(PriemRegPersonData)).apply(this, arguments));}_createClass(PriemRegPersonData, [{ key: 'componentWillMount', value: function componentWillMount()

		{
			this.props.getDefaultNames();
			this.props.getGovermentList();
			this.props.getTypeDocList();
		} }, { key: 'getDefaultFirstNames', value: function getDefaultFirstNames()

		{
			return this.props.defaultNames && this.props.defaultNames.firstNames || [];
		} }, { key: 'getDefaultMiddleNames', value: function getDefaultMiddleNames()

		{var _this2 = this;
			var middleNames = this.props.defaultNames && this.props.defaultNames.middleNames || [];
			if (this.props.newPerson && this.props.newPerson["firstName"]) {
				var personName = this.props.defaultNames.firstNames.find(function (name) {return name.value === _this2.props.newPerson["firstName"];});
				if (personName) {
					return middleNames.filter(function (name) {return name.sex == personName.sex;});
				}
			}
			return middleNames;
		} }, { key: 'filterNames', value: function filterNames(
		searchText, key, sex)
		{
			return searchText.length > 1 && searchText !== '' && key.indexOf(searchText) !== -1;
		} }, { key: 'getPersonResultEGE', value: function getPersonResultEGE()
		{

		} }, { key: 'checkExistData', value: function checkExistData(
		mainData, message, innerData)
		{
			if (innerData) return this.props.newPerson && this.props.newPerson[mainData][innerData] ? false : message;
			return this.props.newPerson && this.props.newPerson[mainData] ? false : message;
		} }, { key: 'onSexNewPerson', value: function onSexNewPerson(
		value, key) {
			if (key) {

				var typeSex = this.props.defaultNames.firstNames[key].sex;

				this.props.setSexNewPerson(typeSex);
			}
		} }, { key: 'render', value: function render()
		{var _this3 = this;
			console.log("newPerson===>>>", this.props);
			var currentDate = new Date().getFullYear();
			var requiredField = "Обязательно для заполнения";var
			newPerson = this.props.newPerson;
			return (
				_react2.default.createElement('div', { style: { display: 'flex' } },
					_react2.default.createElement('div', { style: _StylePriem.Styles.paddingSides },
						_react2.default.createElement(_TextField2.default, { style: _StylePriem.Styles.marginBetweenTextField, onChange: this.props.setLastName,
							fullWidth: true, id: 'lastName', hintText: '\u0418\u0432\u0430\u043D\u043E\u0432', errorText: this.checkExistData("last_name", requiredField), floatingLabelText: "Фамилия" }),
						_react2.default.createElement('br', null),
						_react2.default.createElement(_AutoComplete2.default, { style: { margin: 0 }, floatingLabelText: "Имя", listStyle: _StylePriem.Styles.listAutoComplete, onUpdateInput: this.props.setFirstName,
							hintText: '\u0418\u0432\u0430\u043D', fullWidth: true, onNewRequest: this.onSexNewPerson.bind(this),
							textFieldStyle: this.checkExistData("last_name", requiredField) ? _StylePriem.Styles.marginBetweenTextField : _StylePriem.Styles.marginBetweenTextFieldValid,
							filter: function filter(searchText, key) {return _this3.filterNames(searchText, key);},
							dataSource: this.getDefaultFirstNames(),
							dataSourceConfig: dataSourceConfig, errorText: this.checkExistData("first_name", requiredField) }),
						_react2.default.createElement('br', null),
						_react2.default.createElement(_AutoComplete2.default, { floatingLabelText: "Отчество", listStyle: _StylePriem.Styles.listAutoComplete,
							hintText: '\u0418\u0432\u0430\u043D\u043E\u0432\u0438\u0447', fullWidth: true,
							textFieldStyle: this.checkExistData("first_name", requiredField) ? _StylePriem.Styles.marginBetweenTextField : _StylePriem.Styles.marginBetweenTextFieldValid,
							filter: function filter(searchText, key) {return _this3.filterNames(searchText, key);},
							dataSource: this.getDefaultMiddleNames(),
							dataSourceConfig: dataSourceConfig }),

						_react2.default.createElement(_RadioButton.RadioButtonGroup, { name: 'sexPerson', style: { display: 'flex', marginTop: 10 },
								valueSelected: newPerson && newPerson["sex"], onChange: function onChange(event, value) {return _this3.props.setSexNewPerson(value - 1);} },
							_react2.default.createElement(_RadioButton.RadioButton, { style: { width: 'auto' },
								labelStyle: { marginRight: 30 },
								iconStyle: { marginRight: 8 },
								value: 1,
								label: '\u041C\u0443\u0436.' }),
							_react2.default.createElement(_RadioButton.RadioButton, {
								iconStyle: { marginRight: 8 },
								value: 2,
								label: '\u0416\u0435\u043D.' })),


						_react2.default.createElement(_TextField2.default, { id: 'birthdate', fullWidth: true, onChange: this.props.setDateOfBirth,
							floatingLabelFixed: true, floatingLabelText: "Дата рождения", type: "date",
							errorText: this.checkExistData("birthdate", requiredField) }),
						_react2.default.createElement('br', null),
						_react2.default.createElement(_TextField2.default, { id: 'placeOfBirth', fullWidth: true, style: this.checkExistData("birthdate", requiredField) ? _StylePriem.Styles.marginBetweenTextField : _StylePriem.Styles.marginBetweenTextFieldValid,
							floatingLabelText: "Место рождения", hintText: "г. Москва", onChange: this.props.setPlaceOfBirth }),


						_react2.default.createElement(_multiSelect2.default, { divider: false, filter: true, selectClass: { marginTop: 10 }, selected: this.props.id_doc && this.props.id_doc.gov,
							title: '\u0413\u0440\u0430\u0436\u0434\u0430\u043D\u0441\u0442\u0432\u043E', onChange: function onChange(value) {return _this3.props.setGovernment(value.id);}, data: this.props.govermentList }),


						_react2.default.createElement(_multiSelect2.default, { divider: false, filter: true, selectClass: { marginTop: 15, marginBottom: 5 }, selected: this.props.govermentList && this.props.govermentList[0],
							title: '\u0414\u043E\u043A\u0443\u043C\u0435\u043D\u0442, \u0443\u0434\u043E\u0441\u0442\u043E\u0432\u0435\u0440\u044F\u044E\u0449\u0438\u0439 \u043B\u0438\u0447\u043D\u043E\u0441\u0442\u044C', onChange: function onChange(value) {return _this3.props.setCurPersonDoc(value);}, data: this.props.typeDocList }),

						_react2.default.createElement(_TextField2.default, { style: _StylePriem.Styles.marginBetweenTextFieldValid,
							id: 'SeriaPassportCur', hintText: '4603', fullWidth: true,
							onChange: this.props.setCurPersonDocSeria,
							errorText: this.checkExistData("id_doc", requiredField, "seria"), floatingLabelText: "Серия документа" }),
						_react2.default.createElement('br', null),

						_react2.default.createElement(_TextField2.default, {
							style: this.checkExistData("id_doc", requiredField, "seria") ? _StylePriem.Styles.marginBetweenTextField : _StylePriem.Styles.marginBetweenTextFieldValid,
							id: 'NumberPassportCur', hintText: '463012', fullWidth: true,
							onChange: this.props.setCurPersonDocNumber,
							errorText: this.checkExistData("id_doc", requiredField, "num"), floatingLabelText: "Номер документа" }),
						_react2.default.createElement('br', null),
						_react2.default.createElement(_TextField2.default, { style: this.checkExistData("id_doc", requiredField, "org") ? _StylePriem.Styles.marginBetweenTextField : _StylePriem.Styles.marginBetweenTextFieldValid,
							id: 'PassportDepartment',
							onChange: this.props.setCurPersonDocDepartment,
							hintText: '\u0422\u041F \u0432 \u043F\u043E\u0441. \u0411\u044B\u043A\u043E\u0432\u043E \u041E\u0423\u0424\u041C\u0421 \u0420\u043E\u0441\u0441\u0438\u0438 \u043F\u043E \u041C\u043E\u0441\u043A\u043E\u0432\u0441\u043A\u043E\u0439 \u043E\u0431\u043B. \u0432 \u0420\u0430\u043C\u0435\u043D\u0441\u043A\u043E\u043C \u0440-\u043D\u0435',
							multiLine: true, rows: 2, rowsMax: 4, fullWidth: true,
							errorText: this.checkExistData("id_doc", requiredField, "org"), floatingLabelText: "Кем выдан" }),
						_react2.default.createElement('br', null),
						_react2.default.createElement(_TextField2.default, {
							onChange: this.props.setCurPersonDocDate,
							fullWidth: true, id: 'dateOfDocPerson',
							floatingLabelFixed: true, style: { marginTop: -10 },
							floatingLabelText: "Дата выдачи",
							type: "date",
							errorText: this.checkExistData("id_doc", requiredField, "date") }),
						_react2.default.createElement('br', null),
						_react2.default.createElement(_TextField2.default, { fullWidth: true, id: 'codeOfDocPerson',
							onChange: this.props.setCurPersonDocCodeDepartment,
							style: this.checkExistData("id_doc", requiredField, "code") ? _StylePriem.Styles.marginBetweenTextField : _StylePriem.Styles.marginBetweenTextFieldValid,
							floatingLabelText: "Код подразделения",
							hintText: '500-144',
							errorText: this.checkExistData("id_doc", requiredField, "code") }),
						_react2.default.createElement(_Checkbox2.default, { labelPosition: 'left',
							onCheck: this.props.setIsFromKrim,
							label: "Постоянно проживающий в Крыму (в соотвествии с ФЗ-№273 РФ)" }),



						_react2.default.createElement(_Divider2.default, { style: { marginTop: 10 } }),
						_react2.default.createElement(_Subheader2.default, { style: { lineHeight: 0, marginTop: 14 } }, '\u0421\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u043E \u0440\u0430\u043D\u0435\u0435 \u0432\u044B\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u0430\u0441\u043F\u043E\u0440\u0442\u0430\u0445 (\u0442\u043E\u043B\u044C\u043A\u043E \u0434\u043B\u044F \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u044F \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u043E\u0432 \u0415\u0413\u042D)'),
						_react2.default.createElement(_TextField2.default, { fullWidth: true, id: 'oldSeriaDocPerson',
							onChange: this.props.setOldPersonDocSeria,
							floatingLabelText: "Серия документа", hintText: '4611' }),
						_react2.default.createElement('br', null),
						_react2.default.createElement(_TextField2.default, { fullWidth: true, id: 'oldNumberDocPerson',
							onChange: this.props.setOldPersonDocNumber,
							style: _StylePriem.Styles.marginBetweenTextField, floatingLabelText: "Номер документа", hintText: '012463' }),
						_react2.default.createElement(_Divider2.default, { style: { marginTop: 10, marginBottom: 10 } }),
						_react2.default.createElement(_Checkbox2.default, { labelPosition: 'left', labelStyle: { fontSize: 14 },
							onCheck: this.getPersonResultEGE.bind(this),
							label: '\u0423\u0447\u0438\u0442\u044B\u0432\u0430\u0442\u044C \u043F\u0440\u0438 \u043F\u043E\u0441\u0442\u0443\u043F\u043B\u0435\u043D\u0438\u0438 \u0432 \u0423\u043D\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0435 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B \u0415\u0413\u042D (\u0434\u0430\u0442\u0430 \u0441\u0434\u0430\u0447\u0438 \u044D\u043A\u0437\u0430\u043C\u0435\u043D\u043E\u0432 \n\t\t\t\t\t   \t\t\u043D\u0435 \u043F\u043E\u0437\u0434\u043D\u0435\u0435 \u043C\u0435\u0441\u044F\u0446\u0430 \u043F\u0440\u043E\u0445\u043E\u0436\u0434\u0435\u043D\u0438\u044F \u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0439 \u0432 ' + (
							currentDate - 4) + ' \u0433\u043E\u0434\u0443)' })),

					_react2.default.createElement('div', { style: { flex: 1, selfAlign: 'center', position: 'relative' } })));




		} }]);return PriemRegPersonData;}(_react2.default.Component);

var mapStateToProps = function mapStateToProps(state)
{
	return {
		priemUser: state.PriemAccount.user,
		error: state.PriemAccount.error,
		defaultNames: state.PriemDataProvider.defaultNames,
		govermentList: state.PriemDataProvider.govermentList,
		typeDocList: state.PriemDataProvider.typeDocList,
		newPerson: state.PriemRegNewPerson };

};
var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	return {
		getDefaultNames: function getDefaultNames() {return dispatch((0, _dataProviderActions.getDefaultNames)());},
		getGovermentList: function getGovermentList() {return dispatch((0, _dataProviderActions.getGovermentList)());},
		getTypeDocList: function getTypeDocList() {return dispatch((0, _dataProviderActions.getTypeDocList)());},
		setFirstName: function setFirstName(value) {return dispatch((0, _regNewPerson.setFirstName)(value));},
		setLastName: function setLastName(event, value) {return dispatch((0, _regNewPerson.setLastName)(value));},
		setMiddleName: function setMiddleName(event, value) {return dispatch((0, _regNewPerson.setMiddleName)(value));},
		setSexNewPerson: function setSexNewPerson(value) {return dispatch((0, _regNewPerson.setSexNewPerson)(value));},
		setDateOfBirth: function setDateOfBirth(event, value) {return dispatch((0, _regNewPerson.setDateOfBirth)(value));},
		setPlaceOfBirth: function setPlaceOfBirth(event, value) {return dispatch((0, _regNewPerson.setPlaceOfBirth)(value));},
		setGovernment: function setGovernment(value) {return dispatch((0, _regNewPerson.setGovernment)(value));},
		setCurPersonDoc: function setCurPersonDoc(value) {return dispatch((0, _regNewPerson.setCurPersonDoc)(value));},
		setCurPersonDocSeria: function setCurPersonDocSeria(event, value) {return dispatch((0, _regNewPerson.setCurPersonDocSeria)(value));},
		setCurPersonDocNumber: function setCurPersonDocNumber(event, value) {return dispatch((0, _regNewPerson.setCurPersonDocNumber)(value));},
		setCurPersonDocDepartment: function setCurPersonDocDepartment(event, value) {return dispatch((0, _regNewPerson.setCurPersonDocDepartment)(value));},
		setCurPersonDocDate: function setCurPersonDocDate(event, value) {return dispatch((0, _regNewPerson.setCurPersonDocDate)(value));},
		setCurPersonDocCodeDepartment: function setCurPersonDocCodeDepartment(event, value) {return dispatch((0, _regNewPerson.setCurPersonDocCodeDepartment)(value));},
		setCurPersonDocPage: function setCurPersonDocPage(value) {return dispatch((0, _regNewPerson.setCurPersonDocPage)(value));},
		setOldPersonDocNumber: function setOldPersonDocNumber(event, value) {return dispatch((0, _regNewPerson.setOldPersonDocNumber)(value));},
		setOldPersonDocSeria: function setOldPersonDocSeria(event, value) {return dispatch((0, _regNewPerson.setOldPersonDocSeria)(value));},
		setIsFromKrim: function setIsFromKrim() {return dispatch((0, _regNewPerson.setIsFromKrim)());} };



};exports.default =
(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PriemRegPersonData);